// Code generated by Prisma (prisma@1.34.10). DO NOT EDIT.
  // Please don't change this file manually but run `prisma generate` to update it.
  // For more information, please read the docs: https://www.prisma.io/docs/prisma-client/

export const typeDefs = /* GraphQL */ `type AggregateCartItem {
  count: Int!
}

type AggregateIceCream {
  count: Int!
}

type AggregateToppings {
  count: Int!
}

type AggregateUser {
  count: Int!
}

type BatchPayload {
  count: Long!
}

type CartItem {
  id: ID!
  userId: ID!
  iceCreamId: ID!
}

type CartItemConnection {
  pageInfo: PageInfo!
  edges: [CartItemEdge]!
  aggregate: AggregateCartItem!
}

input CartItemCreateInput {
  id: ID
  userId: ID!
  iceCreamId: ID!
}

type CartItemEdge {
  node: CartItem!
  cursor: String!
}

enum CartItemOrderByInput {
  id_ASC
  id_DESC
  userId_ASC
  userId_DESC
  iceCreamId_ASC
  iceCreamId_DESC
}

type CartItemPreviousValues {
  id: ID!
  userId: ID!
  iceCreamId: ID!
}

type CartItemSubscriptionPayload {
  mutation: MutationType!
  node: CartItem
  updatedFields: [String!]
  previousValues: CartItemPreviousValues
}

input CartItemSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: CartItemWhereInput
  AND: [CartItemSubscriptionWhereInput!]
  OR: [CartItemSubscriptionWhereInput!]
  NOT: [CartItemSubscriptionWhereInput!]
}

input CartItemUpdateInput {
  userId: ID
  iceCreamId: ID
}

input CartItemUpdateManyMutationInput {
  userId: ID
  iceCreamId: ID
}

input CartItemWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  userId: ID
  userId_not: ID
  userId_in: [ID!]
  userId_not_in: [ID!]
  userId_lt: ID
  userId_lte: ID
  userId_gt: ID
  userId_gte: ID
  userId_contains: ID
  userId_not_contains: ID
  userId_starts_with: ID
  userId_not_starts_with: ID
  userId_ends_with: ID
  userId_not_ends_with: ID
  iceCreamId: ID
  iceCreamId_not: ID
  iceCreamId_in: [ID!]
  iceCreamId_not_in: [ID!]
  iceCreamId_lt: ID
  iceCreamId_lte: ID
  iceCreamId_gt: ID
  iceCreamId_gte: ID
  iceCreamId_contains: ID
  iceCreamId_not_contains: ID
  iceCreamId_starts_with: ID
  iceCreamId_not_starts_with: ID
  iceCreamId_ends_with: ID
  iceCreamId_not_ends_with: ID
  AND: [CartItemWhereInput!]
  OR: [CartItemWhereInput!]
  NOT: [CartItemWhereInput!]
}

input CartItemWhereUniqueInput {
  id: ID
}

type IceCream {
  id: ID!
  name: String!
  cost: Float!
  toppings(where: ToppingsWhereInput, orderBy: ToppingsOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Toppings!]
  rating: Float
  image: String
}

type IceCreamConnection {
  pageInfo: PageInfo!
  edges: [IceCreamEdge]!
  aggregate: AggregateIceCream!
}

input IceCreamCreateInput {
  id: ID
  name: String!
  cost: Float!
  toppings: ToppingsCreateManyInput
  rating: Float
  image: String
}

type IceCreamEdge {
  node: IceCream!
  cursor: String!
}

enum IceCreamOrderByInput {
  id_ASC
  id_DESC
  name_ASC
  name_DESC
  cost_ASC
  cost_DESC
  rating_ASC
  rating_DESC
  image_ASC
  image_DESC
}

type IceCreamPreviousValues {
  id: ID!
  name: String!
  cost: Float!
  rating: Float
  image: String
}

type IceCreamSubscriptionPayload {
  mutation: MutationType!
  node: IceCream
  updatedFields: [String!]
  previousValues: IceCreamPreviousValues
}

input IceCreamSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: IceCreamWhereInput
  AND: [IceCreamSubscriptionWhereInput!]
  OR: [IceCreamSubscriptionWhereInput!]
  NOT: [IceCreamSubscriptionWhereInput!]
}

input IceCreamUpdateInput {
  name: String
  cost: Float
  toppings: ToppingsUpdateManyInput
  rating: Float
  image: String
}

input IceCreamUpdateManyMutationInput {
  name: String
  cost: Float
  rating: Float
  image: String
}

input IceCreamWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  name: String
  name_not: String
  name_in: [String!]
  name_not_in: [String!]
  name_lt: String
  name_lte: String
  name_gt: String
  name_gte: String
  name_contains: String
  name_not_contains: String
  name_starts_with: String
  name_not_starts_with: String
  name_ends_with: String
  name_not_ends_with: String
  cost: Float
  cost_not: Float
  cost_in: [Float!]
  cost_not_in: [Float!]
  cost_lt: Float
  cost_lte: Float
  cost_gt: Float
  cost_gte: Float
  toppings_every: ToppingsWhereInput
  toppings_some: ToppingsWhereInput
  toppings_none: ToppingsWhereInput
  rating: Float
  rating_not: Float
  rating_in: [Float!]
  rating_not_in: [Float!]
  rating_lt: Float
  rating_lte: Float
  rating_gt: Float
  rating_gte: Float
  image: String
  image_not: String
  image_in: [String!]
  image_not_in: [String!]
  image_lt: String
  image_lte: String
  image_gt: String
  image_gte: String
  image_contains: String
  image_not_contains: String
  image_starts_with: String
  image_not_starts_with: String
  image_ends_with: String
  image_not_ends_with: String
  AND: [IceCreamWhereInput!]
  OR: [IceCreamWhereInput!]
  NOT: [IceCreamWhereInput!]
}

input IceCreamWhereUniqueInput {
  id: ID
}

scalar Long

type Mutation {
  createCartItem(data: CartItemCreateInput!): CartItem!
  updateCartItem(data: CartItemUpdateInput!, where: CartItemWhereUniqueInput!): CartItem
  updateManyCartItems(data: CartItemUpdateManyMutationInput!, where: CartItemWhereInput): BatchPayload!
  upsertCartItem(where: CartItemWhereUniqueInput!, create: CartItemCreateInput!, update: CartItemUpdateInput!): CartItem!
  deleteCartItem(where: CartItemWhereUniqueInput!): CartItem
  deleteManyCartItems(where: CartItemWhereInput): BatchPayload!
  createIceCream(data: IceCreamCreateInput!): IceCream!
  updateIceCream(data: IceCreamUpdateInput!, where: IceCreamWhereUniqueInput!): IceCream
  updateManyIceCreams(data: IceCreamUpdateManyMutationInput!, where: IceCreamWhereInput): BatchPayload!
  upsertIceCream(where: IceCreamWhereUniqueInput!, create: IceCreamCreateInput!, update: IceCreamUpdateInput!): IceCream!
  deleteIceCream(where: IceCreamWhereUniqueInput!): IceCream
  deleteManyIceCreams(where: IceCreamWhereInput): BatchPayload!
  createToppings(data: ToppingsCreateInput!): Toppings!
  updateToppings(data: ToppingsUpdateInput!, where: ToppingsWhereUniqueInput!): Toppings
  updateManyToppingses(data: ToppingsUpdateManyMutationInput!, where: ToppingsWhereInput): BatchPayload!
  upsertToppings(where: ToppingsWhereUniqueInput!, create: ToppingsCreateInput!, update: ToppingsUpdateInput!): Toppings!
  deleteToppings(where: ToppingsWhereUniqueInput!): Toppings
  deleteManyToppingses(where: ToppingsWhereInput): BatchPayload!
  createUser(data: UserCreateInput!): User!
  updateUser(data: UserUpdateInput!, where: UserWhereUniqueInput!): User
  updateManyUsers(data: UserUpdateManyMutationInput!, where: UserWhereInput): BatchPayload!
  upsertUser(where: UserWhereUniqueInput!, create: UserCreateInput!, update: UserUpdateInput!): User!
  deleteUser(where: UserWhereUniqueInput!): User
  deleteManyUsers(where: UserWhereInput): BatchPayload!
}

enum MutationType {
  CREATED
  UPDATED
  DELETED
}

interface Node {
  id: ID!
}

type PageInfo {
  hasNextPage: Boolean!
  hasPreviousPage: Boolean!
  startCursor: String
  endCursor: String
}

type Query {
  cartItem(where: CartItemWhereUniqueInput!): CartItem
  cartItems(where: CartItemWhereInput, orderBy: CartItemOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [CartItem]!
  cartItemsConnection(where: CartItemWhereInput, orderBy: CartItemOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): CartItemConnection!
  iceCream(where: IceCreamWhereUniqueInput!): IceCream
  iceCreams(where: IceCreamWhereInput, orderBy: IceCreamOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [IceCream]!
  iceCreamsConnection(where: IceCreamWhereInput, orderBy: IceCreamOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): IceCreamConnection!
  toppings(where: ToppingsWhereUniqueInput!): Toppings
  toppingses(where: ToppingsWhereInput, orderBy: ToppingsOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Toppings]!
  toppingsesConnection(where: ToppingsWhereInput, orderBy: ToppingsOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): ToppingsConnection!
  user(where: UserWhereUniqueInput!): User
  users(where: UserWhereInput, orderBy: UserOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [User]!
  usersConnection(where: UserWhereInput, orderBy: UserOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): UserConnection!
  node(id: ID!): Node
}

type Subscription {
  cartItem(where: CartItemSubscriptionWhereInput): CartItemSubscriptionPayload
  iceCream(where: IceCreamSubscriptionWhereInput): IceCreamSubscriptionPayload
  toppings(where: ToppingsSubscriptionWhereInput): ToppingsSubscriptionPayload
  user(where: UserSubscriptionWhereInput): UserSubscriptionPayload
}

type Toppings {
  id: ID!
  name: String!
}

type ToppingsConnection {
  pageInfo: PageInfo!
  edges: [ToppingsEdge]!
  aggregate: AggregateToppings!
}

input ToppingsCreateInput {
  id: ID
  name: String!
}

input ToppingsCreateManyInput {
  create: [ToppingsCreateInput!]
  connect: [ToppingsWhereUniqueInput!]
}

type ToppingsEdge {
  node: Toppings!
  cursor: String!
}

enum ToppingsOrderByInput {
  id_ASC
  id_DESC
  name_ASC
  name_DESC
}

type ToppingsPreviousValues {
  id: ID!
  name: String!
}

input ToppingsScalarWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  name: String
  name_not: String
  name_in: [String!]
  name_not_in: [String!]
  name_lt: String
  name_lte: String
  name_gt: String
  name_gte: String
  name_contains: String
  name_not_contains: String
  name_starts_with: String
  name_not_starts_with: String
  name_ends_with: String
  name_not_ends_with: String
  AND: [ToppingsScalarWhereInput!]
  OR: [ToppingsScalarWhereInput!]
  NOT: [ToppingsScalarWhereInput!]
}

type ToppingsSubscriptionPayload {
  mutation: MutationType!
  node: Toppings
  updatedFields: [String!]
  previousValues: ToppingsPreviousValues
}

input ToppingsSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: ToppingsWhereInput
  AND: [ToppingsSubscriptionWhereInput!]
  OR: [ToppingsSubscriptionWhereInput!]
  NOT: [ToppingsSubscriptionWhereInput!]
}

input ToppingsUpdateDataInput {
  name: String
}

input ToppingsUpdateInput {
  name: String
}

input ToppingsUpdateManyDataInput {
  name: String
}

input ToppingsUpdateManyInput {
  create: [ToppingsCreateInput!]
  update: [ToppingsUpdateWithWhereUniqueNestedInput!]
  upsert: [ToppingsUpsertWithWhereUniqueNestedInput!]
  delete: [ToppingsWhereUniqueInput!]
  connect: [ToppingsWhereUniqueInput!]
  set: [ToppingsWhereUniqueInput!]
  disconnect: [ToppingsWhereUniqueInput!]
  deleteMany: [ToppingsScalarWhereInput!]
  updateMany: [ToppingsUpdateManyWithWhereNestedInput!]
}

input ToppingsUpdateManyMutationInput {
  name: String
}

input ToppingsUpdateManyWithWhereNestedInput {
  where: ToppingsScalarWhereInput!
  data: ToppingsUpdateManyDataInput!
}

input ToppingsUpdateWithWhereUniqueNestedInput {
  where: ToppingsWhereUniqueInput!
  data: ToppingsUpdateDataInput!
}

input ToppingsUpsertWithWhereUniqueNestedInput {
  where: ToppingsWhereUniqueInput!
  update: ToppingsUpdateDataInput!
  create: ToppingsCreateInput!
}

input ToppingsWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  name: String
  name_not: String
  name_in: [String!]
  name_not_in: [String!]
  name_lt: String
  name_lte: String
  name_gt: String
  name_gte: String
  name_contains: String
  name_not_contains: String
  name_starts_with: String
  name_not_starts_with: String
  name_ends_with: String
  name_not_ends_with: String
  AND: [ToppingsWhereInput!]
  OR: [ToppingsWhereInput!]
  NOT: [ToppingsWhereInput!]
}

input ToppingsWhereUniqueInput {
  id: ID
}

type User {
  id: ID!
  email: String!
  password: String!
}

type UserConnection {
  pageInfo: PageInfo!
  edges: [UserEdge]!
  aggregate: AggregateUser!
}

input UserCreateInput {
  id: ID
  email: String!
  password: String!
}

type UserEdge {
  node: User!
  cursor: String!
}

enum UserOrderByInput {
  id_ASC
  id_DESC
  email_ASC
  email_DESC
  password_ASC
  password_DESC
}

type UserPreviousValues {
  id: ID!
  email: String!
  password: String!
}

type UserSubscriptionPayload {
  mutation: MutationType!
  node: User
  updatedFields: [String!]
  previousValues: UserPreviousValues
}

input UserSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: UserWhereInput
  AND: [UserSubscriptionWhereInput!]
  OR: [UserSubscriptionWhereInput!]
  NOT: [UserSubscriptionWhereInput!]
}

input UserUpdateInput {
  email: String
  password: String
}

input UserUpdateManyMutationInput {
  email: String
  password: String
}

input UserWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  email: String
  email_not: String
  email_in: [String!]
  email_not_in: [String!]
  email_lt: String
  email_lte: String
  email_gt: String
  email_gte: String
  email_contains: String
  email_not_contains: String
  email_starts_with: String
  email_not_starts_with: String
  email_ends_with: String
  email_not_ends_with: String
  password: String
  password_not: String
  password_in: [String!]
  password_not_in: [String!]
  password_lt: String
  password_lte: String
  password_gt: String
  password_gte: String
  password_contains: String
  password_not_contains: String
  password_starts_with: String
  password_not_starts_with: String
  password_ends_with: String
  password_not_ends_with: String
  AND: [UserWhereInput!]
  OR: [UserWhereInput!]
  NOT: [UserWhereInput!]
}

input UserWhereUniqueInput {
  id: ID
  email: String
}
`